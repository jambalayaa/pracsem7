library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_UNSIGNED.ALL; 
entity FIFO_4x8 is Port ( rst: in STD_LOGIC; 
			  clk : in STD_LOGIC; 
			  addr: in STD_LOGIC_VECTOR (1 downto 0) := "00";
			  d_in: in STD_LOGIC_VECTOR (7 downto 0); 
			  rd_wr: in STD_LOGIC; 
			  d_out : out STD_LOGIC_VECTOR (7 downto 0) := "00000000"; 
			  empty : out STD_LOGIC := 1; full : out STD_LOGIC:= 0); 
end FIFO_4x8; 
architecture FIFO_4×8_arch of FIFO_4x8 is 
TYPE mem IS ARRAY(3 DOWNTO 0) OF STD_LOGIC_VECTOR (7 DOWNTO 0); 
SIGNAL memory : mem := (others=>(others=> 0')); 
begin 
PROCESS(rst, clk, addr, d_in, rd wr) 
begin 
	if rst = '1' then 
		d_out <= "00000000"; 
		empty <= '1; 
		full <= '0'; 
		memory <= (others=>(others=>'0')); 
	elsif falling_edge (clk) then 
	case rd wr is 
		when 'O' => 
			d_out <= memory(conv_integer(addr)); 
			empty <='0 ; full <= '1'; 
		when others => 
		memory(conv_integer(addr)) <= d_in; 
		empty <= '0; 
		if addr = "11" then
			full <='1'; 
		else
			full <= '0';  
		end if; 
	end case; 
end if; 
end process; 
end FIFO_4x8 _arch;


--Stimulus process

stim_proc: process begin

rst <= '0';

wait for clk_period;

rst <= 1';

wait for clk_period;

rd_wr <= '1';

for address in 0 to 3 loop

addr <= std_logic_vector(to_unsigned(address, 2)); d in <= std_logic_vector(to_unsigned(63*(address + 1), 8 wait for clk_period*2;

end loop;

d_in <= std_logic_vector(to_unsigned(0, 8));

rd_wr <= 0';

for address in 0 to 3 loop

addr<= std_logic_vector(to_unsigned(address, 2)); wait for clk_period*2;

end loop;

end process;

END;


